#include<iostream>
using namespace std;
#include <string>

//引用做函数参数：通过引用让形参修饰实参的技术

//地址传递
void swap01(int* a,int*b) {
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

//引用传递
void swap02(int& a, int& b) {
	int temp;
	temp = a;
	a = b;
	b = temp;
}

int main() {
	
	int a = 10;
	int b = 2;
	cout << "交换前：" << endl;
	cout << "a=" << a << endl;
	cout << "b=" << b << endl;
	swap01(&a, &b);
	cout << "用地址交换后：" << endl;
	cout << "a=" << a << endl;
	cout << "b=" << b << endl;


	int c = 9;
	int d = 12;
	cout << "交换前：" << endl;
	cout << "c=" << c << endl;
	cout << "d=" << d << endl;
	swap02(c,d);
	cout << "用引用交换后：" << endl;
	cout << "c=" << c  << endl;
	cout << "d=" << d << endl;


	system("pause");
	return 0;
}



#include<iostream>
using namespace std;

//引用作函数的返回值
	////1.不能返回局部变量的引用
	////2.可以返回静态变量的引用
	////3.如果函数做左值，必须返回引用

//返回局部变量引用
int& test01() {

	int a = 10;//局部变量,存放在栈区
	return a;

}
//返回静态变量引用
int& test02() {
	static int a = 20;//静态变量存放在堆区
	return a;
}
int main() {
	
	int& ref1 = test01();
	cout << "ref1=" << ref1 << endl;//栈区数据编译器自动保留一次
	cout << "ref1=" << ref1 << endl;//乱码，栈区数据已释放

	int& ref2 = test02();
	cout << "ref2=" << ref2 << endl;
	cout << "ref2=" << ref2 << endl;//堆区数据不会自动释放

	cout << "函数做左值" << endl;

	test02() = 1000;
	cout << "ref2=" << ref2 << endl;


	system("pause");
	return 0;

}






#include<iostream>
using namespace std;

//引用的本质是指针常量，解引用的操作由编译器完成
//指针常量：指针的指向不可以改，指针指向的值可以改
//int* const p;

//常量引用：使用在形参，用来防止误操作修改实参

void showValue(const int& v) {
	//v+=10;会报错，v不允许被修改
	cout << v << endl;
}
int main() {

	int a = 100;
	showValue(a);
	
	//int& ref=10;这是不合法的，引用需要指向一个合法的内存空间
	//可以这样修改，将引用定义为常量引用，即可指向常数
	const int& ref = 10;//编译器优化代码，int temp=10;const int& ref=temp;


	system("pause");
	return 0;

}
